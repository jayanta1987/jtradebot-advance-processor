name: Build and Deploy to AWS ECR

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**', 'release/**' ]  # Allow deployment from any feature branch
  workflow_dispatch:  # Allow manual trigger with approval

jobs:
  approval:
    runs-on: ubuntu-latest
    environment: jtradebot-prod  # This will require approval before any deployment
    outputs:
      approved: ${{ steps.approval.outputs.approved }}
    steps:
      - name: Manual Approval Required
        id: approval
        run: |
          echo "Manual approval required before building and deploying"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "approved=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-deploy:
    needs: approval
    runs-on: ubuntu-latest
    environment: jtradebot-prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build, tag, and push image to ECR
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }} .
          docker push ${{ secrets.ECR_REPOSITORY }}

      - name: Force new ECS deployment
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster jtradebot \
            --services jtradebot-advance-processor-service \
            --query "services[0].taskDefinition" \
            --output text)
          
          aws ecs update-service \
            --cluster jtradebot \
            --service jtradebot-advance-processor-service \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
